@page "/"
@inject PromptService PromptService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>MEGAZONE AIR Prompt</PageTitle>

<div class="home-container">
    <!-- Hero Section -->
    <section class="hero-section">
        <div class="hero-content">            <h1 class="hero-title" tabindex="-1">
                <span class="hero-icon">🚀</span>
                MEGAZONE AIR Prompt
            </h1>
            <p class="hero-subtitle">
                AI 시대를 위한 최고의 프롬프트 컬렉션<br>
                창의적인 아이디어와 효율적인 작업을 위한 완벽한 도구
            </p>
            
            <!-- Quick Search -->
            <div class="hero-search">
                <div class="search-container">
                    <input @bind="searchTerm" @onkeypress="OnSearchKeyPress"
                           placeholder="원하는 프롬프트를 검색해보세요..." 
                           class="search-input-large" />
                    <button class="search-btn-large" @onclick="PerformSearch">
                        <span class="search-icon">🔍</span>
                        검색
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Stats Section -->
        <div class="stats-section">
            <div class="stat-item">
                <div class="stat-number">@totalPrompts</div>
                <div class="stat-label">프롬프트</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">@totalCategories</div>
                <div class="stat-label">카테고리</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">@totalTags</div>
                <div class="stat-label">태그</div>
            </div>
        </div>
    </section>

    <!-- Features Section -->
    <section class="features-section">
        <h2 class="section-title">주요 기능</h2>
        <div class="features-grid">
            <div class="feature-card">
                <div class="feature-icon">💡</div>
                <h3>다양한 카테고리</h3>
                <p>비즈니스, 개발, 교육, 창작 등 다양한 분야의 프롬프트를 제공합니다</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">📋</div>
                <h3>원클릭 복사</h3>
                <p>마음에 드는 프롬프트를 클릭 한 번으로 클립보드에 복사할 수 있습니다</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">💖</div>
                <h3>즐겨찾기</h3>
                <p>자주 사용하는 프롬프트를 즐겨찾기에 추가하여 빠르게 접근하세요</p>
            </div>
        </div>
    </section>

    <!-- Categories Section -->
    <section class="categories-section">
        <h2 class="section-title">인기 카테고리</h2>
        <div class="categories-grid">
            @if (categories != null)
            {
                @foreach (var category in categories.Take(6))
                {
                    <div class="category-card" @onclick="() => NavigateToCategory(category)">
                        <div class="category-icon">@GetCategoryIcon(category)</div>
                        <h3>@category</h3>
                        <p>@GetCategoryCount(category)개의 프롬프트</p>
                    </div>
                }
            }
        </div>
        
        <div class="view-all-section">
            <button class="btn-primary" @onclick="ViewAllPrompts">
                모든 프롬프트 보기
            </button>
        </div>
    </section>

    <!-- Recent Prompts Section -->
    @if (recentPrompts?.Any() == true)
    {        <section class="recent-section">
            <h2 class="section-title">최근 업데이트된 프롬프트</h2>
            <div class="recent-prompts-grid">                @foreach (var prompt in recentPrompts.Take(3))
                {
                    <PromptMiniCard Prompt="prompt" 
                                    OnCardClick="ViewPrompt" />
                }</div>
        </section>
    }
</div>

@code {
    private List<PromptItem>? recentPrompts;
    private List<string>? categories;
    private string searchTerm = "";
    private int totalPrompts = 0;
    private int totalCategories = 0;
    private int totalTags = 0;protected override async Task OnInitializedAsync()
    {
        await LoadQuickStats();
        await LoadData();
    }

    private async Task LoadQuickStats()
    {
        try
        {
            // 빠른 통계 정보 먼저 로드 (매니페스트만 사용)
            totalPrompts = await PromptService.GetPromptCountAsync();
            totalCategories = await PromptService.GetCategoryCountAsync();
            StateHasChanged(); // UI 업데이트
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading quick stats: {ex.Message}");
        }
    }    private async Task LoadData()
    {
        try
        {
            categories = await PromptService.GetCategoriesAsync();

            // 최근 프롬프트는 메타데이터만 로드하여 성능 최적화
            var allPromptMetadata = await PromptService.GetAllPromptMetadataAsync();
            recentPrompts = allPromptMetadata?
                .OrderByDescending(p => p.UpdatedDate)
                .Take(6)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }

        StateHasChanged();
    }
    
    private void OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            PerformSearch();
        }
    }

    private void PerformSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            Navigation.NavigateTo($"/prompts?search={Uri.EscapeDataString(searchTerm)}");
        }
    }

    private void NavigateToCategory(string category)
    {
        Navigation.NavigateTo($"/prompts?category={Uri.EscapeDataString(category)}");
    }

    private void ViewAllPrompts()
    {
        Navigation.NavigateTo("/prompts");
    }    private void ViewPrompt(string promptId)
    {
        // Prompts 페이지로 이동하면서 특정 프롬프트를 바로 열도록 함
        Navigation.NavigateTo($"/prompts?promptId={Uri.EscapeDataString(promptId)}");
    }

    private string GetCategoryIcon(string category)
    {
        return category.ToLower() switch
        {
            "business" or "비즈니스" => "💼",
            "development" or "개발" => "💻",
            "education" or "교육" => "📚",
            "writing" or "창작" => "✍️",
            "marketing" or "마케팅" => "📈",
            "design" or "디자인" => "🎨",
            _ => "📝"
        };
    }    private int GetCategoryCount(string category)
    {
        // 매니페스트 데이터에서 카테고리별 개수를 가져오도록 수정
        return PromptService.GetCategoryCountAsync(category).Result;
    }
}
