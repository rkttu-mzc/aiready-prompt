@page "/prompt/{promptId}"
@inject PromptService PromptService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Web

@if (currentPrompt != null)
{
    <div class="prompt-detail-container">
        <!-- 백그라운드 데코레이션 -->
        <div class="background-decoration"></div>
        
        <!-- 메인 컨테이너 -->
        <div class="main-container">
            <!-- 네비게이션 헤더 -->
            <nav class="detail-navigation">
                <button class="nav-back-btn" @onclick="GoBack">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M19 12H5M12 19l-7-7 7-7"/>
                    </svg>
                    목록으로 돌아가기
                </button>
                
                <div class="nav-actions">
                    <button class="nav-action-btn" @onclick="CopyPermalink" title="링크 복사">
                        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"/>
                            <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"/>
                        </svg>
                    </button>
                    <button class="nav-action-btn favorite @(currentPrompt.IsFavorite ? "active" : "")" 
                            @onclick="ToggleFavorite" title="즐겨찾기">
                        <svg width="18" height="18" viewBox="0 0 24 24" fill="@(currentPrompt.IsFavorite ? "currentColor" : "none")" stroke="currentColor" stroke-width="2">
                            <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
                        </svg>
                    </button>
                </div>
            </nav>

            <!-- 메인 콘텐츠 카드 -->
            <main class="content-card">
                <!-- 헤더 섹션 -->
                <header class="card-header">
                    <div class="header-content">
                        <div class="category-tag">@currentPrompt.Category</div>
                        <h1 class="main-title">@currentPrompt.Title</h1>
                        <p class="main-description">@currentPrompt.Description</p>
                        
                        <div class="meta-info">
                            <div class="meta-item">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
                                    <circle cx="12" cy="7" r="4"/>
                                </svg>
                                @currentPrompt.Author
                            </div>
                            <div class="meta-item">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
                                    <line x1="16" y1="2" x2="16" y2="6"/>
                                    <line x1="8" y1="2" x2="8" y2="6"/>
                                    <line x1="3" y1="10" x2="21" y2="10"/>
                                </svg>
                                @currentPrompt.CreatedDate.ToString("yyyy.MM.dd")
                            </div>
                        </div>
                        
                        @if (currentPrompt.Tags.Any())
                        {
                            <div class="tag-container">
                                @foreach (var tag in currentPrompt.Tags)
                                {
                                    <span class="tag-item">#@tag</span>
                                }
                            </div>
                        }
                    </div>
                </header>

                <!-- 콘텐츠 섹션 -->
                <section class="card-content">
                    <div class="content-header">
                        <h2 class="content-title">프롬프트 내용</h2>
                        <button class="copy-button" @onclick="CopyContent">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
                            </svg>
                            복사하기
                        </button>
                    </div>
                    <p><strong>사용법</strong>: 아래의 프롬프트에서 사각 괄호 <code>[ ]</code> 부분이 있다면, 해당 부분을 지우고 상황에 맞게 적절한 내용으로 바꾸어 사용해주세요.</p>
                    <div class="content-body">
                        <pre class="markdown-content">@currentPrompt.Content</pre>
                    </div>
                </section>
            </main>
        </div>
    </div>
}
else if (isLoading)
{
    <div class="loading">
        <div class="spinner"></div>
        <p>프롬프트를 불러오는 중...</p>
    </div>
}
else
{
    <div class="error">
        <h2>프롬프트를 찾을 수 없습니다</h2>
        <p>요청하신 프롬프트가 존재하지 않거나 삭제되었습니다.</p>
        <button class="back-btn" @onclick="GoToPrompts">
            프롬프트 목록으로 이동
        </button>
    </div>
}

@code {
    [Parameter] public string PromptId { get; set; } = string.Empty;
    
    private PromptItem? currentPrompt;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadPrompt();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(PromptId))
        {
            await LoadPrompt();
        }
    }
    
    private async Task LoadPrompt()
    {
        isLoading = true;
        try
        {
            currentPrompt = await PromptService.GetPromptByIdAsync(PromptId);
            
            // 즐겨찾기 상태 복원
            if (currentPrompt != null)
            {
                await LoadFavoriteState();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"프롬프트 로드 오류: {ex.Message}");
            currentPrompt = null;
        }
        finally
        {
            isLoading = false;            StateHasChanged();
        }
    }
    
    private async Task CopyPermalink()
    {
        var currentUrl = Navigation.Uri;
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", currentUrl);
            await JSRuntime.InvokeVoidAsync("alert", "링크가 클립보드에 복사되었습니다!");
        }
        catch
        {
            await JSRuntime.InvokeVoidAsync("alert", "링크 복사에 실패했습니다.");
        }
    }

    private async Task CopyContent()
    {
        if (currentPrompt != null)
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", currentPrompt.Content);
            await JSRuntime.InvokeVoidAsync("alert", "프롬프트가 클립보드에 복사되었습니다!");
        }
    }
    
    private async Task ToggleFavorite()
    {
        if (currentPrompt != null)
        {
            try
            {
                currentPrompt.IsFavorite = !currentPrompt.IsFavorite;
                
                // localStorage에 즐겨찾기 상태 저장 (다른 페이지들과 동일한 방식 사용)
                await SaveFavoritesToStorage();
                
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error toggling favorite: {ex.Message}");
                // 오류 발생 시 상태 되돌리기
                currentPrompt.IsFavorite = !currentPrompt.IsFavorite;
            }
        }
    }

    private void GoBack()
    {
        JSRuntime.InvokeVoidAsync("history.back");
    }
    
    private void GoToPrompts()
    {
        Navigation.NavigateTo("/prompts");
    }
        
    private async Task LoadFavoriteState()
    {
        try
        {
            var favoritesJson = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "favorites");
            if (!string.IsNullOrEmpty(favoritesJson))
            {
                var favoriteIds = System.Text.Json.JsonSerializer.Deserialize<List<string>>(favoritesJson);
                if (favoriteIds != null && currentPrompt != null)
                {
                    currentPrompt.IsFavorite = favoriteIds.Contains(currentPrompt.Id);
                }
            }
            else if (currentPrompt != null)
            {
                currentPrompt.IsFavorite = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading favorite state: {ex.Message}");
            if (currentPrompt != null)
            {
                currentPrompt.IsFavorite = false;
            }
        }
    }

    private async Task SaveFavoritesToStorage()
    {
        try
        {
            // 기존 즐겨찾기 목록 가져오기
            var existingFavoritesJson = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "favorites");
            var favoriteIds = new List<string>();
            
            if (!string.IsNullOrEmpty(existingFavoritesJson))
            {
                var existingFavoriteIds = System.Text.Json.JsonSerializer.Deserialize<List<string>>(existingFavoritesJson);
                if (existingFavoriteIds != null)
                {
                    favoriteIds = existingFavoriteIds.ToList();
                }
            }

            if (currentPrompt != null)
            {
                if (currentPrompt.IsFavorite && !favoriteIds.Contains(currentPrompt.Id))
                {
                    favoriteIds.Add(currentPrompt.Id);
                }
                else if (!currentPrompt.IsFavorite && favoriteIds.Contains(currentPrompt.Id))
                {
                    favoriteIds.Remove(currentPrompt.Id);
                }
            }

            var favoritesJson = System.Text.Json.JsonSerializer.Serialize(favoriteIds.Distinct().ToList());
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "favorites", favoritesJson);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to save favorites to storage: {ex.Message}");
        }
    }
}
